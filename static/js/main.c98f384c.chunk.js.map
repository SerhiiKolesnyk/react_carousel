{"version":3,"sources":["components/Carousel.js","App.js","index.js"],"names":["Carousel","state","currentIdx","imageCount","nextButtonDisabled","prevButtonDisabled","updateButtonsState","frameSize","props","setState","toNextSmile","step","toPreviousSmile","images","this","length","prevProps","prevState","itemWidth","animationDuration","carouselWidth","className","type","onClick","disabled","style","width","map","image","key","replace","listItemStyle","transitionDuration","transform","imgStyle","src","alt","React","Component","defaultProps","App","changeValue","ev","target","name","value","min","max","newValue","htmlFor","id","onChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c98f384c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Carousel.scss';\n\nclass Carousel extends React.Component {\n  state = {\n    currentIdx: 0,\n    imageCount: 0,\n    nextButtonDisabled: false,\n    prevButtonDisabled: true,\n  };\n\n  componentDidMount() {\n    const { images } = this.props;\n\n    this.setState({\n      imageCount: images.length,\n      prevButtonDisabled: true,\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.frameSize !== this.props.frameSize) {\n      this.updateButtonsState();\n    }\n  }\n\n  updateButtonsState = () => {\n    const { frameSize } = this.props;\n\n    this.setState((state) => {\n      const nextButtonDisabled = state.currentIdx === (\n        state.imageCount - frameSize\n      );\n      const prevButtonDisabled = state.currentIdx <= 0;\n\n      return {\n        nextButtonDisabled,\n        prevButtonDisabled,\n      };\n    });\n  };\n\n  toNextSmile = () => {\n    const { step, frameSize } = this.props;\n\n    this.setState((state) => {\n      let currentIdx = state.currentIdx + step;\n\n      if (currentIdx >= (state.imageCount - frameSize)) {\n        currentIdx = state.imageCount - frameSize;\n      }\n\n      return {\n        currentIdx,\n      };\n    });\n\n    this.updateButtonsState();\n  };\n\n  toPreviousSmile = () => {\n    const { step } = this.props;\n\n    this.setState((state) => {\n      const currentIdx = state.currentIdx === 0\n        ? state.currentIdx\n        : state.currentIdx - step;\n\n      return {\n        currentIdx: currentIdx < 0 ? 0 : currentIdx,\n      };\n    });\n\n    this.updateButtonsState();\n  };\n\n  render() {\n    const {\n      images,\n      itemWidth,\n      frameSize,\n      animationDuration,\n    } = this.props;\n\n    const {\n      currentIdx,\n      nextButtonDisabled,\n      prevButtonDisabled,\n    } = this.state;\n\n    const carouselWidth = itemWidth * (\n      images.length < frameSize ? images.length : frameSize\n    );\n\n    return (\n      <div className=\"CarouselContainer\">\n        <button\n          type=\"button\"\n          className=\"Carousel__button\"\n          onClick={this.toPreviousSmile}\n          disabled={prevButtonDisabled}\n        >\n          Prev\n        </button>\n\n        <div className=\"Carousel\" style={{ width: carouselWidth }}>\n          <ul\n            className=\"Carousel__list\"\n          >\n            {\n              images.map((image) => {\n                const key = +image.replace(/\\D/g, '');\n                const listItemStyle = {\n                  transitionDuration: `${animationDuration}ms`,\n                  transform: `translateX(-${currentIdx * itemWidth}px)`,\n                };\n                const imgStyle = {\n                  width: `${itemWidth}px`,\n                };\n\n                return (\n                  <li\n                    key={key}\n                    className=\"Carousel__item\"\n                    style={listItemStyle}\n                  >\n                    <img\n                      className=\"Carousel__image\"\n                      src={image}\n                      alt={key}\n                      style={imgStyle}\n                    />\n                  </li>\n                );\n              })\n            }\n          </ul>\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"Carousel__button\"\n          onClick={this.toNextSmile}\n          disabled={nextButtonDisabled}\n        >\n          Next\n        </button>\n      </div>\n    );\n  }\n}\n\nCarousel.propTypes = {\n  images: PropTypes.arrayOf(PropTypes.string).isRequired,\n  itemWidth: PropTypes.number,\n  frameSize: PropTypes.number,\n  step: PropTypes.number,\n  animationDuration: PropTypes.number,\n};\n\nCarousel.defaultProps = {\n  itemWidth: 130,\n  frameSize: 3,\n  step: 3,\n  animationDuration: 1000,\n};\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\n\nimport Carousel from './components/Carousel';\n\nclass App extends React.Component {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n  };\n\n  changeValue = (ev) => {\n    const { name, value, min, max } = ev.target;\n    let newValue = +value < +min ? +min : +value;\n\n    newValue = newValue > +max ? +max : newValue;\n\n    this.setState({\n      [name]: newValue,\n    });\n  };\n\n  render() {\n    const { images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n        />\n        <form className=\"App__form\">\n          <fieldset>\n            <legend>Ð¡ontrol point:</legend>\n            <div className=\"App__form-field\">\n              <label htmlFor=\"step\">Step ---- </label>\n              <input\n                type=\"number\"\n                id=\"step\"\n                name=\"step\"\n                value={step}\n                min=\"1\"\n                max=\"10\"\n                onChange={this.changeValue}\n              />\n            </div>\n\n            <div className=\"App__form-field\">\n              <label htmlFor=\"frameSize\">Frame Size ---- </label>\n              <input\n                type=\"number\"\n                id=\"frameSize\"\n                name=\"frameSize\"\n                value={frameSize}\n                min=\"1\"\n                max=\"10\"\n                onChange={this.changeValue}\n              />\n            </div>\n\n            <div className=\"App__form-field\">\n              <label htmlFor=\"itemWidth\">Item Width ---- </label>\n              <input\n                type=\"number\"\n                id=\"itemWidth\"\n                name=\"itemWidth\"\n                value={itemWidth}\n                min=\"30\"\n                max=\"300\"\n                onChange={this.changeValue}\n              />\n            </div>\n\n            <div className=\"App__form-field\">\n              <label htmlFor=\"animationDuration\">\n                Animation Duration ----\n              </label>\n              <input\n                type=\"number\"\n                name=\"animationDuration\"\n                id=\"animationDuration\"\n                value={animationDuration}\n                min=\"0\"\n                max=\"3000\"\n                onChange={this.changeValue}\n              />\n            </div>\n          </fieldset>\n\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}